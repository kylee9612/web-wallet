plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.springframework.experimental.aot' version '0.12.1'
    id 'org.hibernate.orm'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.axiasoft'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    configureEach {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.openliberty.features:grpcClient-1.0:22.0.0.7'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.0.0'

    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:9.0.58'

    implementation 'org.xrpl:xrpl4j-address-codec:2.5.1'
    implementation 'org.xrpl:xrpl4j-crypto-parent:2.5.1'
    implementation 'org.xrpl:xrpl4j-binary-codec:2.5.1'
    implementation 'org.xrpl:xrpl4j-crypto-core:2.5.1'
    implementation 'org.xrpl:xrpl4j-client:2.5.1'
    implementation 'org.xrpl:xrpl4j-bom:2.5.1'
    implementation 'org.xrpl:xrpl4j-keypairs:2.5.1'
    implementation 'org.xrpl:xrpl4j-crypto-bouncycastle:2.5.1'
    // https://mvnrepository.com/artifact/org.immutables/value
    compileOnly group: 'org.immutables', name: 'value', version: '2.9.2'
    // https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
    implementation 'com.mysql:mysql-connector-j:8.0.31'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
// https://mvnrepository.com/artifact/org.bitcoinj/bitcoinj-core
    implementation group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.16.2'

    implementation files("libs/cryptobridge-1.2.jar")

}

def frontDir = "$projectDir/src/main/my-app"

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}
//
//processResources {
//    dependsOn "copyReactBuildFiles"
//}
//
//tasks.register('installReact', Exec) {
//    workingDir "$frontDir"
//    inputs.dir "$frontDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "audit", "fix"
//        commandLine 'npm.cmd', 'install'
//    } else {
//        commandLine "npm", "audit", "fix"
//        commandLine 'npm', 'install'
//    }
//}
//
//tasks.register('buildReact', Exec) {
//    dependsOn "installReact"
//    workingDir "$frontDir"
//    inputs.dir "$frontDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "run-script", "build"
//    } else {
//        commandLine "npm", "run-script", "build"
//    }
//}
//
//tasks.register('copyReactBuildFiles', Copy) {
//    dependsOn "buildReact"
//    from "$frontDir/build"
//    into "$buildDir/resources/main/static"
//}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder:tiny'
    environment = ['BP_NATIVE_IMAGE': 'true']
}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

tasks.bootWar {
    dependsOn "copyReactBuildFiles"
}